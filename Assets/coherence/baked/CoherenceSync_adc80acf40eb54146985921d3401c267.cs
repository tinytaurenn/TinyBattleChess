// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_adc80acf40eb54146985921d3401c267_05c624cd36a74805b9af1b035b9349e1 : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_adc80acf40eb54146985921d3401c267_e3a0da5886a9432096083feb136b17e0 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldOrientation);
        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;

            var simFrame = ((WorldOrientation)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_adc80acf40eb54146985921d3401c267_2465093893d24a0199828df419255697 : ScaleBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(GenericScale);
        public override string CoherenceComponentName => "GenericScale";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherenceLocalScale); }
            set { coherenceSync.coherenceLocalScale = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((GenericScale)coherenceComponent).value;

            var simFrame = ((GenericScale)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (GenericScale)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new GenericScale();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_adc80acf40eb54146985921d3401c267 : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_adc80acf40eb54146985921d3401c267>();
        
        private global::ScrollProjectile _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251_CommandTarget;
        private global::ScrollProjectile _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4_CommandTarget;
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
            ["05c624cd36a74805b9af1b035b9349e1"] = new Binding_adc80acf40eb54146985921d3401c267_05c624cd36a74805b9af1b035b9349e1(),
            ["e3a0da5886a9432096083feb136b17e0"] = new Binding_adc80acf40eb54146985921d3401c267_e3a0da5886a9432096083feb136b17e0(),
            ["2465093893d24a0199828df419255697"] = new Binding_adc80acf40eb54146985921d3401c267_2465093893d24a0199828df419255697(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_adc80acf40eb54146985921d3401c267()
        {
            bakedCommandBindings.Add("cba734ac65d34d6fbbca6b15723ff251", BakeCommandBinding__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251);
            bakedCommandBindings.Add("493d908d444a41d5b78ec1b8db12eed4", BakeCommandBinding__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4);
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
    
        private void BakeCommandBinding__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251_CommandTarget = (global::ScrollProjectile)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand("ScrollProjectile.InstantiateExplosion", "()", SendCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251, ReceiveLocalCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251, MessageTarget.All, _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251_CommandTarget, false);
        }
        
        private void SendCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(MessageTarget target, ChannelID channelID, object[] args)
        {
            var command = new _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251();
            
        
            client.SendCommand(command, target, entityId, channelID);
        }
        
        private void ReceiveLocalCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(MessageTarget target, ChannelID _, object[] args)
        {
            var command = new _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251();
            
            
            ReceiveCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(command);
        }

        private void ReceiveCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(_adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251 command)
        {
            var target = _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251_CommandTarget;
            
            target.InstantiateExplosion();
        }
    
        private void BakeCommandBinding__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4_CommandTarget = (global::ScrollProjectile)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand("ScrollProjectile.StopParticles", "()", SendCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4, ReceiveLocalCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4, MessageTarget.All, _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4_CommandTarget, false);
        }
        
        private void SendCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(MessageTarget target, ChannelID channelID, object[] args)
        {
            var command = new _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4();
            
        
            client.SendCommand(command, target, entityId, channelID);
        }
        
        private void ReceiveLocalCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(MessageTarget target, ChannelID _, object[] args)
        {
            var command = new _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4();
            
            
            ReceiveCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(command);
        }

        private void ReceiveCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(_adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4 command)
        {
            var target = _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4_CommandTarget;
            
            target.StopParticles();
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                case _adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251 castedCommand:
                    ReceiveCommand__adc80acf40eb54146985921d3401c267_cba734ac65d34d6fbbca6b15723ff251(castedCommand);
                    break;
                case _adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4 castedCommand:
                    ReceiveCommand__adc80acf40eb54146985921d3401c267_493d908d444a41d5b78ec1b8db12eed4(castedCommand);
                    break;
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_adc80acf40eb54146985921d3401c267 Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame)
        {
            if (!usesLodsAtRuntime)
            {
                return null;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                var components = new List<ICoherenceComponentData>()
                {
                    new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                };

                return components;
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
            
            return null;
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_adc80acf40eb54146985921d3401c267>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
