// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_5d6316af86183e242bf98f8a058fd8db_a09016d912e543f9ad3e7ea467d6066f : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldPosition);
        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_5d6316af86183e242bf98f8a058fd8db_54d8dae041c44fb09d85119dc8733e06 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(WorldOrientation);
        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;

            var simFrame = ((WorldOrientation)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_5d6316af86183e242bf98f8a058fd8db_ecaf09d4ac3642cab69ddd9105338288 : ScaleBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override global::System.Type CoherenceComponentType => typeof(GenericScale);
        public override string CoherenceComponentName => "GenericScale";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherenceLocalScale); }
            set { coherenceSync.coherenceLocalScale = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((GenericScale)coherenceComponent).value;

            var simFrame = ((GenericScale)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (GenericScale)coherenceComponent;
            if (Interpolator.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new GenericScale();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_5d6316af86183e242bf98f8a058fd8db : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_5d6316af86183e242bf98f8a058fd8db>();
        
        private global::PotionProjectile _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b_CommandTarget;
        private global::PotionProjectile _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f_CommandTarget;
        
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
            ["a09016d912e543f9ad3e7ea467d6066f"] = new Binding_5d6316af86183e242bf98f8a058fd8db_a09016d912e543f9ad3e7ea467d6066f(),
            ["54d8dae041c44fb09d85119dc8733e06"] = new Binding_5d6316af86183e242bf98f8a058fd8db_54d8dae041c44fb09d85119dc8733e06(),
            ["ecaf09d4ac3642cab69ddd9105338288"] = new Binding_5d6316af86183e242bf98f8a058fd8db_ecaf09d4ac3642cab69ddd9105338288(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_5d6316af86183e242bf98f8a058fd8db()
        {
            bakedCommandBindings.Add("4949dab0c9cd4b03807bf7ceb384616b", BakeCommandBinding__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b);
            bakedCommandBindings.Add("933039bfe4f14e489686412a9c5aba4f", BakeCommandBinding__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f);
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
    
        private void BakeCommandBinding__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b_CommandTarget = (global::PotionProjectile)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand("PotionProjectile.StopParticles", "()", SendCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b, ReceiveLocalCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b, MessageTarget.All, _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b_CommandTarget, false);
        }
        
        private void SendCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(MessageTarget target, ChannelID channelID, object[] args)
        {
            var command = new _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b();
            
        
            client.SendCommand(command, target, entityId, channelID);
        }
        
        private void ReceiveLocalCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(MessageTarget target, ChannelID _, object[] args)
        {
            var command = new _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b();
            
            
            ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(command);
        }

        private void ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(_5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b command)
        {
            var target = _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b_CommandTarget;
            
            target.StopParticles();
        }
    
        private void BakeCommandBinding__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f_CommandTarget = (global::PotionProjectile)commandBinding.UnityComponent;
            commandsHandler.AddBakedCommand("PotionProjectile.InstantiateExplosion", "(UnityEngine.Vector3)", SendCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f, ReceiveLocalCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f, MessageTarget.All, _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f_CommandTarget, false);
        }
        
        private void SendCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(MessageTarget target, ChannelID channelID, object[] args)
        {
            var command = new _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f();
            
            int i = 0;
            command.pos = (UnityEngine.Vector3)args[i++];
        
            client.SendCommand(command, target, entityId, channelID);
        }
        
        private void ReceiveLocalCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(MessageTarget target, ChannelID _, object[] args)
        {
            var command = new _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f();
            
            int i = 0;
            command.pos = (UnityEngine.Vector3)args[i++];
            
            ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(command);
        }

        private void ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(_5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f command)
        {
            var target = _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f_CommandTarget;
            
            target.InstantiateExplosion((UnityEngine.Vector3)(command.pos));
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                case _5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b castedCommand:
                    ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_4949dab0c9cd4b03807bf7ceb384616b(castedCommand);
                    break;
                case _5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f castedCommand:
                    ReceiveCommand__5d6316af86183e242bf98f8a058fd8db_933039bfe4f14e489686412a9c5aba4f(castedCommand);
                    break;
                default:
                    logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncReceiveCommandUnhandled,
                        $"CoherenceSync_5d6316af86183e242bf98f8a058fd8db Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame)
        {
            if (!usesLodsAtRuntime)
            {
                return null;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                var components = new List<ICoherenceComponentData>()
                {
                    new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                };

                return components;
            }
    
            logger.Warning(Coherence.Log.Warning.ToolkitBakedSyncCreateEntityMissingArchetype,
                $"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
            
            return null;
        }
        
        public override void Dispose()
        {
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_5d6316af86183e242bf98f8a058fd8db>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
        }
    }
}
