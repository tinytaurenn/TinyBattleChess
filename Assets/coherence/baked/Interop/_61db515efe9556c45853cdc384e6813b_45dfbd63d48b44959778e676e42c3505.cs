// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505 : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 IntEGameEffect;
            [FieldOffset(4)]
            public System.Single value;
            [FieldOffset(8)]
            public System.Single duration;
            [FieldOffset(12)]
            public System.Int32 IntEEffectType;
            [FieldOffset(16)]
            public Entity damagerSync;
        }

        public static unsafe _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505 FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 20) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for command with ID 79");
            }

            var orig = new _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505();
            var comp = (Interop*)data;
            orig.IntEGameEffect = comp->IntEGameEffect;
            orig.value = comp->value;
            orig.duration = comp->duration;
            orig.IntEEffectType = comp->IntEEffectType;
            orig.damagerSync = comp->damagerSync;
            return orig;
        }

        public System.Int32 IntEGameEffect;
        public System.Single value;
        public System.Single duration;
        public System.Int32 IntEEffectType;
        public Entity damagerSync;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public uint GetComponentType() => 79;
        
        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            err = mapper.MapToAbsoluteEntity(damagerSync, false, out absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.damagerSync = absoluteEntity;
            
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            err = mapper.MapToRelativeEntity(damagerSync, false, out relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.damagerSync = relativeEntity;
            
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return new HashSet<Entity> {
                this.damagerSync,
            };
        }

        public void NullEntityRefs(Entity entity) {
            if (this.damagerSync == entity) {
                this.damagerSync = Entity.InvalidRelative;
            }
        }
        
        public _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505(
        Entity entity,
        System.Int32 IntEGameEffect,
        System.Single value,
        System.Single duration,
        System.Int32 IntEEffectType,
        Entity damagerSync
)
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Routing = MessageTarget.All;
            Sender = 0;
            
            this.IntEGameEffect = IntEGameEffect; 
            this.value = value; 
            this.duration = duration; 
            this.IntEEffectType = IntEEffectType; 
            this.damagerSync = damagerSync; 
        }
        
        public static void Serialize(_61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteIntegerRange(commandData.IntEGameEffect, 32, -2147483648);
            bitStream.WriteFloat(commandData.value, FloatMeta.NoCompression());
            bitStream.WriteFloat(commandData.duration, FloatMeta.NoCompression());
            bitStream.WriteIntegerRange(commandData.IntEEffectType, 32, -2147483648);
            bitStream.WriteEntity(commandData.damagerSync);
        }
        
        public static _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var dataIntEGameEffect = bitStream.ReadIntegerRange(32, -2147483648);
            var datavalue = bitStream.ReadFloat(FloatMeta.NoCompression());
            var dataduration = bitStream.ReadFloat(FloatMeta.NoCompression());
            var dataIntEEffectType = bitStream.ReadIntegerRange(32, -2147483648);
            var datadamagerSync = bitStream.ReadEntity();
    
            return new _61db515efe9556c45853cdc384e6813b_45dfbd63d48b44959778e676e42c3505()
            {
                Entity = entity,
                Routing = target,
                IntEGameEffect = dataIntEGameEffect,
                value = datavalue,
                duration = dataduration,
                IntEEffectType = dataIntEEffectType,
                damagerSync = datadamagerSync
            };   
        }
    }

}
