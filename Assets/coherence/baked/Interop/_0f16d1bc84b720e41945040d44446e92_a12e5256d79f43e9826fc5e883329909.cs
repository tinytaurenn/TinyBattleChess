// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909 : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 index;
        }

        public static unsafe _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909 FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 4) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 4) " +
                    "for command with ID 11");
            }

            var orig = new _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909();
            var comp = (Interop*)data;
            orig.index = comp->index;
            return orig;
        }

        public System.Int32 index;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public uint GetComponentType() => 11;
        
        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return default;
        }

        public void NullEntityRefs(Entity entity) {
        }
        
        public _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909(
        Entity entity,
        System.Int32 index
)
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Routing = MessageTarget.All;
            Sender = 0;
            
            this.index = index; 
        }
        
        public static void Serialize(_0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteIntegerRange(commandData.index, 32, -2147483648);
        }
        
        public static _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var dataindex = bitStream.ReadIntegerRange(32, -2147483648);
    
            return new _0f16d1bc84b720e41945040d44446e92_a12e5256d79f43e9826fc5e883329909()
            {
                Entity = entity,
                Routing = target,
                index = dataindex
            };   
        }
    }

}
