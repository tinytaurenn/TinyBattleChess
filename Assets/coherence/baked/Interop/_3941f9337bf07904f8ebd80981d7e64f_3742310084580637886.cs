// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 m_TurnNumber;
            [FieldOffset(4)]
            public System.Int32 m_IntPlayState;
            [FieldOffset(8)]
            public System.Int32 m_IntGameState;
            [FieldOffset(12)]
            public System.Int32 m_IntGameMode;
            [FieldOffset(16)]
            public System.Single m_RespawnTime;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_TurnNumberMask;
            m_TurnNumberSimulationFrame = frame;
            FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntPlayStateMask;
            m_IntPlayStateSimulationFrame = frame;
            FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameStateMask;
            m_IntGameStateSimulationFrame = frame;
            FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameModeMask;
            m_IntGameModeSimulationFrame = frame;
            FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_RespawnTimeMask;
            m_RespawnTimeSimulationFrame = frame;
        }

        public static unsafe _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 20) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for component with ID 173");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 173");
            }

            var orig = new _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886();

            var comp = (Interop*)data;

            orig.m_TurnNumber = comp->m_TurnNumber;
            orig.m_IntPlayState = comp->m_IntPlayState;
            orig.m_IntGameState = comp->m_IntGameState;
            orig.m_IntGameMode = comp->m_IntGameMode;
            orig.m_RespawnTime = comp->m_RespawnTime;

            return orig;
        }


        public static uint m_TurnNumberMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame m_TurnNumberSimulationFrame;
        public System.Int32 m_TurnNumber;
        public static uint m_IntPlayStateMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame m_IntPlayStateSimulationFrame;
        public System.Int32 m_IntPlayState;
        public static uint m_IntGameStateMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame m_IntGameStateSimulationFrame;
        public System.Int32 m_IntGameState;
        public static uint m_IntGameModeMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame m_IntGameModeSimulationFrame;
        public System.Int32 m_IntGameMode;
        public static uint m_RespawnTimeMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame m_RespawnTimeSimulationFrame;
        public System.Single m_RespawnTime;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 173;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000011111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 5;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _m_TurnNumber_Min = -2147483648;
        private static readonly System.Int32 _m_TurnNumber_Max = 2147483647;
        private static readonly System.Int32 _m_IntPlayState_Min = -2147483648;
        private static readonly System.Int32 _m_IntPlayState_Max = 2147483647;
        private static readonly System.Int32 _m_IntGameState_Min = -2147483648;
        private static readonly System.Int32 _m_IntGameState_Max = 2147483647;
        private static readonly System.Int32 _m_IntGameMode_Min = -2147483648;
        private static readonly System.Int32 _m_IntGameMode_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.m_TurnNumberSimulationFrame = other.m_TurnNumberSimulationFrame;
                this.m_TurnNumber = other.m_TurnNumber;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.m_IntPlayStateSimulationFrame = other.m_IntPlayStateSimulationFrame;
                this.m_IntPlayState = other.m_IntPlayState;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.m_IntGameStateSimulationFrame = other.m_IntGameStateSimulationFrame;
                this.m_IntGameState = other.m_IntGameState;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.m_IntGameModeSimulationFrame = other.m_IntGameModeSimulationFrame;
                this.m_IntGameMode = other.m_IntGameMode;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.m_RespawnTimeSimulationFrame = other.m_RespawnTimeSimulationFrame;
                this.m_RespawnTime = other.m_RespawnTime;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 5);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.m_TurnNumber, _m_TurnNumber_Min, _m_TurnNumber_Max, "_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_TurnNumber", logger);

                data.m_TurnNumber = Coherence.Utils.Bounds.Clamp(data.m_TurnNumber, _m_TurnNumber_Min, _m_TurnNumber_Max);

                var fieldValue = data.m_TurnNumber;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.m_IntPlayState, _m_IntPlayState_Min, _m_IntPlayState_Max, "_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntPlayState", logger);

                data.m_IntPlayState = Coherence.Utils.Bounds.Clamp(data.m_IntPlayState, _m_IntPlayState_Min, _m_IntPlayState_Max);

                var fieldValue = data.m_IntPlayState;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.m_IntGameState, _m_IntGameState_Min, _m_IntGameState_Max, "_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameState", logger);

                data.m_IntGameState = Coherence.Utils.Bounds.Clamp(data.m_IntGameState, _m_IntGameState_Min, _m_IntGameState_Max);

                var fieldValue = data.m_IntGameState;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.m_IntGameMode, _m_IntGameMode_Min, _m_IntGameMode_Max, "_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameMode", logger);

                data.m_IntGameMode = Coherence.Utils.Bounds.Clamp(data.m_IntGameMode, _m_IntGameMode_Min, _m_IntGameMode_Max);

                var fieldValue = data.m_IntGameMode;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.m_RespawnTime;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;

            return mask;
        }

        public static _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var val = new _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886();
            if (bitStream.ReadMask())
            {

                val.m_TurnNumber = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_TurnNumberMask;
            }
            if (bitStream.ReadMask())
            {

                val.m_IntPlayState = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntPlayStateMask;
            }
            if (bitStream.ReadMask())
            {

                val.m_IntGameState = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameStateMask;
            }
            if (bitStream.ReadMask())
            {

                val.m_IntGameMode = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_IntGameModeMask;
            }
            if (bitStream.ReadMask())
            {

                val.m_RespawnTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _3941f9337bf07904f8ebd80981d7e64f_3742310084580637886.m_RespawnTimeMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_3941f9337bf07904f8ebd80981d7e64f_3742310084580637886(" +
                $" m_TurnNumber: { this.m_TurnNumber }" +
                $" m_IntPlayState: { this.m_IntPlayState }" +
                $" m_IntGameState: { this.m_IntGameState }" +
                $" m_IntGameMode: { this.m_IntGameMode }" +
                $" m_RespawnTime: { this.m_RespawnTime }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(5, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(5, '0') })";
        }
    }

}
